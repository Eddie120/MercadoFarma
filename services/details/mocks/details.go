// Code generated by MockGen. DO NOT EDIT.
// Source: details.go

// Package mock_details is a generated GoMock package.
package mock_details

import (
	context "context"
	reflect "reflect"

	core "github.com/mercadofarma/services/core"
	gomock "go.uber.org/mock/gomock"
)

// MockDetailService is a mock of DetailService interface.
type MockDetailService struct {
	ctrl     *gomock.Controller
	recorder *MockDetailServiceMockRecorder
}

// MockDetailServiceMockRecorder is the mock recorder for MockDetailService.
type MockDetailServiceMockRecorder struct {
	mock *MockDetailService
}

// NewMockDetailService creates a new mock instance.
func NewMockDetailService(ctrl *gomock.Controller) *MockDetailService {
	mock := &MockDetailService{ctrl: ctrl}
	mock.recorder = &MockDetailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetailService) EXPECT() *MockDetailServiceMockRecorder {
	return m.recorder
}

// InsertDetail mocks base method.
func (m *MockDetailService) InsertDetail(ctx context.Context, detail *core.Detail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDetail", ctx, detail)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDetail indicates an expected call of InsertDetail.
func (mr *MockDetailServiceMockRecorder) InsertDetail(ctx, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDetail", reflect.TypeOf((*MockDetailService)(nil).InsertDetail), ctx, detail)
}
