// Code generated by MockGen. DO NOT EDIT.
// Source: dynamodb.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	gomock "go.uber.org/mock/gomock"
)

// MockDynamoDbAPI is a mock of DynamoDbAPI interface.
type MockDynamoDbAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoDbAPIMockRecorder
}

// MockDynamoDbAPIMockRecorder is the mock recorder for MockDynamoDbAPI.
type MockDynamoDbAPIMockRecorder struct {
	mock *MockDynamoDbAPI
}

// NewMockDynamoDbAPI creates a new mock instance.
func NewMockDynamoDbAPI(ctrl *gomock.Controller) *MockDynamoDbAPI {
	mock := &MockDynamoDbAPI{ctrl: ctrl}
	mock.recorder = &MockDynamoDbAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoDbAPI) EXPECT() *MockDynamoDbAPIMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockDynamoDbAPI) GetItem(ctx context.Context, params *dynamodb.GetItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.GetItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockDynamoDbAPIMockRecorder) GetItem(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockDynamoDbAPI)(nil).GetItem), varargs...)
}

// PutItem mocks base method.
func (m *MockDynamoDbAPI) PutItem(ctx context.Context, params *dynamodb.PutItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockDynamoDbAPIMockRecorder) PutItem(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockDynamoDbAPI)(nil).PutItem), varargs...)
}
