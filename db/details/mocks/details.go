// Code generated by MockGen. DO NOT EDIT.
// Source: details.go

// Package mock_details is a generated GoMock package.
package mock_details

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	core "github.com/mercadofarma/services/core"
	gomock "go.uber.org/mock/gomock"
)

// MockDetailStore is a mock of DetailStore interface.
type MockDetailStore struct {
	ctrl     *gomock.Controller
	recorder *MockDetailStoreMockRecorder
}

// MockDetailStoreMockRecorder is the mock recorder for MockDetailStore.
type MockDetailStoreMockRecorder struct {
	mock *MockDetailStore
}

// NewMockDetailStore creates a new mock instance.
func NewMockDetailStore(ctrl *gomock.Controller) *MockDetailStore {
	mock := &MockDetailStore{ctrl: ctrl}
	mock.recorder = &MockDetailStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDetailStore) EXPECT() *MockDetailStoreMockRecorder {
	return m.recorder
}

// InsertDetail mocks base method.
func (m *MockDetailStore) InsertDetail(ctx context.Context, detail *core.Detail) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDetail", ctx, detail)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertDetail indicates an expected call of InsertDetail.
func (mr *MockDetailStoreMockRecorder) InsertDetail(ctx, detail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDetail", reflect.TypeOf((*MockDetailStore)(nil).InsertDetail), ctx, detail)
}
