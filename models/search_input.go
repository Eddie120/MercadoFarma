// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchInput search input
//
// swagger:model SearchInput
type SearchInput struct {

	// city name
	// Enum: [Cali Bogota Medellin Barranquilla]
	City string `json:"city,omitempty"`

	// country name
	// Enum: [CO]
	Country string `json:"country,omitempty"`

	// product name
	Query string `json:"query,omitempty"`
}

// Validate validates this search input
func (m *SearchInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchInputTypeCityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Cali","Bogota","Medellin","Barranquilla"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchInputTypeCityPropEnum = append(searchInputTypeCityPropEnum, v)
	}
}

const (

	// SearchInputCityCali captures enum value "Cali"
	SearchInputCityCali string = "Cali"

	// SearchInputCityBogota captures enum value "Bogota"
	SearchInputCityBogota string = "Bogota"

	// SearchInputCityMedellin captures enum value "Medellin"
	SearchInputCityMedellin string = "Medellin"

	// SearchInputCityBarranquilla captures enum value "Barranquilla"
	SearchInputCityBarranquilla string = "Barranquilla"
)

// prop value enum
func (m *SearchInput) validateCityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchInputTypeCityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchInput) validateCity(formats strfmt.Registry) error {
	if swag.IsZero(m.City) { // not required
		return nil
	}

	// value enum
	if err := m.validateCityEnum("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

var searchInputTypeCountryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchInputTypeCountryPropEnum = append(searchInputTypeCountryPropEnum, v)
	}
}

const (

	// SearchInputCountryCO captures enum value "CO"
	SearchInputCountryCO string = "CO"
)

// prop value enum
func (m *SearchInput) validateCountryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchInputTypeCountryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchInput) validateCountry(formats strfmt.Registry) error {
	if swag.IsZero(m.Country) { // not required
		return nil
	}

	// value enum
	if err := m.validateCountryEnum("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search input based on context it is used
func (m *SearchInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchInput) UnmarshalBinary(b []byte) error {
	var res SearchInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
