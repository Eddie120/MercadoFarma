// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignUpAdminRequest sign up admin request
//
// swagger:model SignUpAdminRequest
type SignUpAdminRequest struct {

	// address
	Address string `json:"address,omitempty"`

	// business name
	BusinessName string `json:"businessName,omitempty"`

	// business opening hours
	BusinessOpeningHours []*BusinessOpeningHour `json:"businessOpeningHours"`

	// business type
	// Enum: [FARMACIA TIENDA_NATURISTA TIENDA_COSMETICA OTRO]
	BusinessType string `json:"businessType,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// password
	// Min Length: 8
	Password string `json:"password,omitempty"`

	// phone number
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// role
	Role *string `json:"role,omitempty"`

	// sector Id
	SectorID string `json:"sectorId,omitempty"`

	// tax Id
	TaxID string `json:"taxId,omitempty"`
}

// Validate validates this sign up admin request
func (m *SignUpAdminRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessOpeningHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignUpAdminRequest) validateBusinessOpeningHours(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessOpeningHours) { // not required
		return nil
	}

	for i := 0; i < len(m.BusinessOpeningHours); i++ {
		if swag.IsZero(m.BusinessOpeningHours[i]) { // not required
			continue
		}

		if m.BusinessOpeningHours[i] != nil {
			if err := m.BusinessOpeningHours[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("businessOpeningHours" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("businessOpeningHours" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var signUpAdminRequestTypeBusinessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FARMACIA","TIENDA_NATURISTA","TIENDA_COSMETICA","OTRO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signUpAdminRequestTypeBusinessTypePropEnum = append(signUpAdminRequestTypeBusinessTypePropEnum, v)
	}
}

const (

	// SignUpAdminRequestBusinessTypeFARMACIA captures enum value "FARMACIA"
	SignUpAdminRequestBusinessTypeFARMACIA string = "FARMACIA"

	// SignUpAdminRequestBusinessTypeTIENDANATURISTA captures enum value "TIENDA_NATURISTA"
	SignUpAdminRequestBusinessTypeTIENDANATURISTA string = "TIENDA_NATURISTA"

	// SignUpAdminRequestBusinessTypeTIENDACOSMETICA captures enum value "TIENDA_COSMETICA"
	SignUpAdminRequestBusinessTypeTIENDACOSMETICA string = "TIENDA_COSMETICA"

	// SignUpAdminRequestBusinessTypeOTRO captures enum value "OTRO"
	SignUpAdminRequestBusinessTypeOTRO string = "OTRO"
)

// prop value enum
func (m *SignUpAdminRequest) validateBusinessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, signUpAdminRequestTypeBusinessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SignUpAdminRequest) validateBusinessType(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBusinessTypeEnum("businessType", "body", m.BusinessType); err != nil {
		return err
	}

	return nil
}

func (m *SignUpAdminRequest) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SignUpAdminRequest) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", m.Password, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sign up admin request based on the context it is used
func (m *SignUpAdminRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessOpeningHours(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignUpAdminRequest) contextValidateBusinessOpeningHours(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BusinessOpeningHours); i++ {

		if m.BusinessOpeningHours[i] != nil {

			if swag.IsZero(m.BusinessOpeningHours[i]) { // not required
				return nil
			}

			if err := m.BusinessOpeningHours[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("businessOpeningHours" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("businessOpeningHours" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignUpAdminRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignUpAdminRequest) UnmarshalBinary(b []byte) error {
	var res SignUpAdminRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
